<?php

/**
 * Transaction
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @package    ProductTrading
 * @subpackage model
 * @author     Your name here
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
class Transaction extends BaseTransaction
{
	const STATUS_PENDING = 0x1;
	const STATUS_ACCEPTED = 0x2;
	const STATUS_REFERRED = 0x3;
	const STATUS_EXPIRED = 0x4;
	/// maximum degree of refer has reached
	const STATUS_MAX_DEGREE = 0x5;
	
	const TYPE_DIRECT_OFFER = 0x11;
	const TYPE_REFER = 0x12;
	
	public static function getStatusName($statusCode){
		$name = null;
		switch($statusCode){
			case self::STATUS_PENDING:
				$name = "pending";
				break;
			case self::STATUS_ACCEPTED:
				$name = "purchased";
				break;
			case self::STATUS_REFERRED:
				$name = "referred";
				break;
			case self::STATUS_EXPIRED:
				$name = "expired";
				break;
		}
		return $name;
	}
	
	/**
	 * calculate the profit for each group per round
	 */
	public static function calculateProfit(){
		$groupProfit = array();
		$allGroups = Doctrine_Core::getTable("Player")->createQuery("q")->execute();
		foreach($allGroups as $group){
			$groupProfit[$group->getId()] = array("sell" => 0, "buy" => 0, "total" => 0);
		}
		
		$allTransactions = Doctrine_Core::getTable("Transaction")->createQuery("q")->execute();
		foreach($allTransactions as $transaction){
			/// generate profit for each transaction
			if($transaction->getStatus() == Transaction::STATUS_ACCEPTED){
				$refDegree = $transaction->getRefDegree();
				$fromGroup = $transaction->getFromId();
				$toGroup = $transaction->getToId();
				$rnd = $transaction->getRnd();
				$price = $transaction->getPrice();
				$frf = $transaction->getFirstRefFee();
				$srf = $transaction->getSecondRefFee();
				$product = Doctrine_Core::getTable("Product")->find($transaction->getProduct());
				$consumer = $product->getConsumer();
				$producer = $product->getProducer();
				$cost = $product->getCost();
				$utility = $product->getUtility();
#				echo implode("\t",array($product->getId(),$cost, $price,$frf,$srf, $utility, $producer, $consumer, $fromGroup, $toGroup)) . "</br>";	
				switch($refDegree){
					case 0:
						/// profit for producer
						$groupProfit[$fromGroup]["sell"] += ($price - $cost);
						/// profit for consumer
						$groupProfit[$consumer]["buy"] += ($utility - $price);
						break;
					case 1:
						/// generate the first degree referral fee for the referrer
						$groupProfit[$fromGroup]["sell"] += $frf;
						/// take the referral fee from the producer
						$groupProfit[$producer]["sell"] -= $frf;
						break;
					case 2:
						/// generate the first degree referral fee for the referrer
						$groupProfit[$fromGroup]["sell"] += $srf;
						/// take the referral fee from the producer
						$groupProfit[$producer]["sell"] -= $srf;
						break;
				}
			}
		}
		foreach($allGroups as $group){
			$groupProfit[$group->getId()]["total"] = $groupProfit[$group->getId()]["sell"] + $groupProfit[$group->getId()]["buy"];
		}
		return $groupProfit;
	}
	
	public static function getTransactionTypeName($code){
		$name = null;
		switch($code){
			case self::TYPE_DIRECT_OFFER:
				$name = "offers";
				break;
			case self::TYPE_REFER:
				$name = "referrals";
				break;
		}
		return $name;
	}
}
